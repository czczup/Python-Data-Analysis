1.1 NumPy库入门


1.1.1 数据的维度
(1)从一个数据到一组数据
一个数据表达一个含义，一组数据表达一个或多个含义
(2)维度
定义：一组数据的组织形式
一维数据：一维数据由对等关系的有序或无序数据构成，采用线性方式组织
        对应列表、数组和集合等概念
二维数据：由多个一维数据构成，是一维数据的组合形式
        表格是典型的二维数据，其中表头是二维数据的一部分
多维数据：由一维或二维数据在新维度上拓展形成
高维数据：高维数据仅利用最基本的二元关系展示数据间的复杂结构
(3)列表和数组
定义：一组数据的有序结构
列表：数据类型可以不同
数组：数据类型相同
(4)数据维度的Python表示
一维数据：列表(有序)和集合(无序)类型
二维数据：列表类型
多维数据：列表类型
高维数据：字典类型或数据表示格式


1.1.2 numpy的数组对象：ndarray
(1)numpy介绍
numpy是一个开源的Python科学计算基础库
•一个强大的N维数组对象ndarray
•广播功能函数
•整合C/C++/Fortran代码的工具
•整合线性代数、傅里叶变换、随机数生成等功能
numpy是SciPy、Pandas等数据处理或科学计算库的基础
(2)numpy的引用
import numpy as np
尽管别名可以省略或修改,建议使用上述约定的别名
(3)为什么需要ndarray
例：计算A2+B3，其中A、B是一维数组
------------------------------------
列表实现：
def pySum():
    a = [0,1,2,3,4]
    b = [9,8,7,6,5]
    c = []
    for i in range(len(a)):
        c.append(a[i]**2 + b[i]**3)
    return c
------------------------------------
numpy实现：
import numpy as np
def pySum():
    a = np.array([0,1,2,3,4])
    b = np.array([9,8,7,6,5])
    c = a**2 + b**3
    return c
------------------------------------
•数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据
•设置专门的数组对象，经过优化，可以提升这类应用的运算速度
•numpy底层由C实现
观察：科学计算中，一个维度所有数据的类型往往相同
•数组对象采用相同的数据类型，有助于节省运算和存储空间
(4)N维数组对象：ndarray
ndarray是一个多维数组对象，由两部分构成
•实际的数据
•描述这些数据的元数据(数据维度、数据类型等)
ndarray数组一般要求所有元素类型相同(同质)，数据下标从0开始
(5)ndarray实例
•np.array()生成一个ndarray数组
 ndarray在程序中的别名是array
 np.array()输出成[]形式，元素由空格分割
 轴(axis)：保存数据的维度
 秩(rank)：轴的数量
•ndarray数组可以由非同质对象构成
 非同质ndarray元素为对象类型
 非同质ndarray对象无法有效发挥numpy的优势，尽量避免使用
(6)ndarray对象
----------------------------------------------------
属性                        说明
.ndim       秩，即轴的数量或维度的数量
.shape      ndarray对象的尺度，对于矩阵，n行m列
.size       ndarray对象元素的个数，相当于.shape中n*m的值
.dtype      ndarray对象的元素类型
.itemsize   ndarray对象中给个元素的大小，以字节为单位
----------------------------------------------------
数据类型                     说明
bool        布尔值，True或False
intc        与C语言中的int类型一致，一般是int32或int64
intp        用于索引的整数，与C语言中的ssize_t一致，int32或int64
int8        字节长度的整数，取值：[-128,127]
int16       16位长度的整数，取值：[-32768,32767]
int32       32位长度的整数，取值：[-2^31,2^31-1]
int64       64位长度的整数，取值：[-2^63,2^63-1]
uint8       8位无符号整数，取值：[0,2^8-1]
uint16      16位无符号整数，取值：[0,2^16-1]
uint32      32位无符号整数，取值：[0,2^32-1]
uint64      64位无符号整数，取值：[0,2^64-1]
float16     16位半精度浮点数
float32     32位半精度浮点数
float64     64位半精度浮点数
complex64   复数类型，实部和虚部都是32位浮点数
complex128  复数类型，实部和虚部都是64位浮点数
----------------------------------------------------
对比：Python语法仅支持整数、浮点数和复数3种类型
•科学计算涉及数据较多，对存储和性能都有较高要求
•对元素的类型精细定义，有助于numpy合理使用存储空间并优化性能
•对元素类型精细定义，有助于程序员对程序规模有合理的评估


1.1.3 ndarray数组的创建和变换
(1)创建方法
•从Python中的列表、元组等类型创建ndarray数组
    x = np.array(list/tuple)
    x = np.array(list/tuple,dtype = np.float32)
    当np.array()不指定dtype时，numpy将根据数据情况关联一个类型
•使用numPy中的函数创建ndarray数组，如：arange，ones，zeros等
    np.arange(n)            类似range()函数，返回ndarray类型，元素从0到n-1 #整数
    np.ones(shape)          根据shape生成一个全1数组，shape是元组类型      #浮点数
    np.zeros(shape)         根据shape生成一个全0数组，shape是元组类型      #浮点数
    np.full(shape,val)      根据shape生成一个数组，每个元素都是val         #浮点数
    np.eye(n)               创建一个正方的n*n单位矩阵                     #浮点数
    np.ones_like(a)         根据数组a的形状生成一个全1数组
    np.zeros_like(a)        根据数组a的形状生成一个全0数组
    np.full_like(a,val)     根据数组a的形状生成一个数组，每个元素值都是val
    np.linspace()           根据起止数据等间距地填充数据，形成数组
    np.concatenate()        将两个或多个数组合并成一个新的数组
•从字节流中创建ndarray数组
•从文件中读取特定格式，创建ndarray数组
(2)数组的变换
对于创建后的ndarray数组，可以对其进行维度变换和元素类型变换
    .reshape(shape)         不改变数组元素，返回一个shape形状的数组，原数组不变
    .resize(shape)          与.reshape()功能一致，但修改原数组
    .swapaxes(ax1,ax2)      将数组n个维度中两个维度进行调换
    .flatten()              对数组进行降维，返回折叠后的一维数组，原数组不变
    .astype(new_type)       创建新的数组，返回类型转换后的数组
    .tolist()               转化为list


1.1.4 ndarray数组的操作
(1)数组的索引和切片
索引：获取数组中特定位置元素的过程
切片：获取数组元素子集的过程
一维数组的索引和切片：与Python的列表类似
多维数组的索引：[a,b,c]
多维数组的切片：[:,:,:]


1.1.5 ndarray数组的运算
(1)数组与标量之间的运算
数组与标量之间的运算作用于数组的每一个元素
(2)numpy一元函数
np.abs(x) np.fabs(x)                计算数组各元素的绝对值
np.sqrt(x)                          计算数组各元素的平方根
np.square(x)                        计算数组各元素的平方
np.log(x) np.log10(x) np.log2(x)    计算数组各元素的对数
np.ceil(x) np.floor(x)              计算数组各元素的ceiling或floor值
np.rint(x)                          计算数组各元素的四舍五入值
np.modf(x)                          将数组各元素的小数和整数部分以两个独立数组形式返回
np.cos(x) np.cosh(x)...             计算各元素的三角函数和双曲型三角函数
np.exp(x)                           计算数组各元素的指数值
np.sign(x)                          计算数组各元素的符号值
(3)numpy二元函数
+-*/**                              两个数组各元素进行对应运算
np.maximum(x,y) np.fmax()           元素级的最大值/最小值计算
np.minimum(x,y) np.fmin()           元素级的模运算
np.mod(x,y)                         元素级的模运算
np.copysign(x,y)                    将数组y中各元素值的符号赋值给数组x对应元素
> < >= <= == !=                     算术比较，产生布尔型数组



1.2 numpy数据存储和函数

1.2.1 数据的CSV文件存取
(1)CSV文件：CSV是一种常见的文件格式，用来存储批量数据
--------------------------------------------------
np.savetxt(frame,array,fmt='%.18e',delimiter=None)
•frame：文件、字符串或产生器，可以是.gz或.bz2的压缩文件
•array：存入文件的数组
•fmt：写入文件的格式
•delimiter：分割字符串，默认是任何空格
--------------------------------------------------
np.loadtxt(frame,dtype=np.float,delimiter=None,unpack=False)
•frame：文件、字符串或产生器，可以是.gz或.bz2的压缩文件
•dtype：数据类型
•delimiter：分割字符串，默认是任何空格
•unpack：如果True，读入属性将分别写入不同变量
--------------------------------------------------
(2)CSV文件的局限性
CSV只能有效存储一维和二维数组
np.savetxt()和np.loadtxt()只能存储和读取一维和二维数组


1.2.2 多维数据的存取
(1)tofile和fromfile
a.tofile(frame,sep='',format='%s')
np.fromfile(frame,dtype=float,count=-1,sep='')
•frame：文件、字符串
•dtype：读取的数据类型
•count：读入元素个数，-1表示读入整个文件
•sep：数据分割字符串，如果是空串，写入文件为二进制
需要注意：
该方法需要读取时知道存入文件时数组的维度和元素类型
a.tofile()和np.fromfile()需要配合使用
可以通过元数据文件来存储额外信息
(2)numpy的便捷文件存取
np.save(fname,array)或np.savez(fname,array)
np.load(fname)
•fname：文件名，以.npy为扩展名，压缩扩展名为.npz
•array：数组变量


1.2.3 numpy的随机数函数子库
(1)随机数函数
np.random.*
np.random.randn(d0,d1,...,dn)   根据d0,dn创建随机数数组，标准正态分布
np.random.rand(d0,d1,...,dn)    根据d0,dn创建随机数数组，浮点数，[0,1)，均匀分布
randint(low[,high,shape])       根据shape创建随机整数或随机数组，范围是[low,high)
shuffle(a)                      根据数组a的第1轴进行随排列，改变数组x
permutation(a)                  根据数组a的第1轴产生一个新的乱序数组，不改变数组x
choice(a[,size,replace,p])      从一维数组a中以概率p抽取元素，形成size形状新数组replace表示是否可以重用元素，默认为False
seed(s)                         随机数种子，s是给定的种子值
uniform(low,high,size)          产生具有均匀分布的数组，low起始值，high结束值，size形状
normal(loc,scale,size)          产生具有正态分布的数组，loc均值，scale标准差，size形状
poisson(lam,size)               产生具有泊松分布的数组，lam随机事件发生率，size形状


1.2.4 numpy的统计函数
(1)统计函数
sum(a,axis=None)                    根据给定轴axis计算数组a相关元素之和，axis整数或元组
mean(a,axis=None)                   根据给定轴axis计算数组a相关元素的期望，axis整数或元组
average(a,axis=None,weights=None)   根据给定轴axis计算数组a相关元素的加权平均值
std(a,axis=None)                    根据给定轴axis计算数组a相关元素的标准差
var(a,axis=None)                    根据给定轴axis计算数组a相关元素的方差
min(a) max(a)                       计算数组a中元素的最小值、最大值
argmin(a) argmax(a)                 计算数组a中元素的最小值、最大值的降一维后下标
unravel_index(index,shape)          根据shape将一维下标index转换成多维下标
ptp(a)                              计算数组a中元素最大值与最小值的差
median(a)                           计算数组a中元素的中位数

1.2.5 numpy的梯度函数
(1)梯度函数
np.gradient(f)                      计算数组f中元素的梯度，当f为多维时，返回每个维度梯度





1.3.1 图像的数组表示
(1)图像的RGB色彩模式
取值范围0-255
RGB形成的颜色包括了人类视力所能感知的所有颜色
(2)PIL库
PIL，Python Image Library
PIL库是一个具有强大图像处理能力的第三方库
(3)图像的变换
读入图像后，获得像素RGB值，修改后保存为新的文件




